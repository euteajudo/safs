#!/usr/bin/env python3
"""
Script para sincronizar o Alembic com o banco de dados existente
Este script faz o Alembic entender o estado atual do banco sem for√ßar mudan√ßas
"""

import os
import sys
from alembic import command
from alembic.config import Config
from sqlalchemy import create_engine, text, inspect

# Define as vari√°veis de ambiente diretamente
os.environ['DB_USER'] = 'postgres'
os.environ['DB_PASSWORD'] = 'admin'
os.environ['DB_HOST'] = 'localhost'
os.environ['DB_PORT'] = '5432'
os.environ['DB_NAME'] = 'postgres'
os.environ['DB_DATABASE'] = 'postgres'

def get_current_alembic_version():
    """Obt√©m a vers√£o atual do Alembic no banco"""
    print("=== VERIFICANDO VERS√ÉO ATUAL DO ALEMBIC ===")
    
    db_user = os.getenv('DB_USER')
    db_password = os.getenv('DB_PASSWORD')
    db_host = os.getenv('DB_HOST')
    db_port = os.getenv('DB_PORT')
    db_name = os.getenv('DB_NAME')
    
    database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    try:
        engine = create_engine(database_url)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version_num FROM alembic_version"))
            version = result.scalar()
            print(f"Vers√£o atual no banco: {version}")
            return version
    except Exception as e:
        print(f"‚úó Erro ao obter vers√£o: {e}")
        return None

def get_latest_migration():
    """Obt√©m a √∫ltima migra√ß√£o dispon√≠vel"""
    print("\n=== VERIFICANDO √öLTIMA MIGRA√á√ÉO DISPON√çVEL ===")
    
    try:
        config = Config('alembic.ini')
        from alembic.script import ScriptDirectory
        script_dir = ScriptDirectory.from_config(config)
        heads = script_dir.get_heads()
        
        if heads:
            latest = heads[0]
            print(f"√öltima migra√ß√£o dispon√≠vel: {latest}")
            return latest
        else:
            print("‚úó Nenhuma migra√ß√£o encontrada")
            return None
    except Exception as e:
        print(f"‚úó Erro ao obter √∫ltima migra√ß√£o: {e}")
        return None

def force_sync_alembic():
    """For√ßa a sincroniza√ß√£o do Alembic com o banco atual"""
    print("\n=== FOR√áANDO SINCRONIZA√á√ÉO DO ALEMBIC ===")
    
    try:
        config = Config('alembic.ini')
        
        # Obt√©m a √∫ltima migra√ß√£o
        latest_migration = get_latest_migration()
        if not latest_migration:
            print("‚ùå N√£o foi poss√≠vel obter a √∫ltima migra√ß√£o")
            return False
        
        # Faz o stamp para a √∫ltima migra√ß√£o (for√ßa sincroniza√ß√£o)
        print(f"Executando stamp para vers√£o: {latest_migration}")
        command.stamp(config, latest_migration)
        print("‚úì Stamp executado com sucesso!")
        
        # Verifica o estado ap√≥s o stamp
        print("\n=== ESTADO AP√ìS STAMP ===")
        command.current(config)
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro durante sincroniza√ß√£o: {e}")
        return False

def create_empty_migration():
    """Cria uma migra√ß√£o vazia para marcar o estado atual"""
    print("\n=== CRIANDO MIGRA√á√ÉO VAZIA PARA ESTADO ATUAL ===")
    
    try:
        config = Config('alembic.ini')
        
        # Cria uma nova migra√ß√£o vazia
        print("Criando migra√ß√£o vazia...")
        command.revision(config, message="Estado atual do banco", autogenerate=False)
        print("‚úì Migra√ß√£o vazia criada!")
        
        # Aplica a migra√ß√£o vazia
        print("Aplicando migra√ß√£o vazia...")
        command.upgrade(config, "head")
        print("‚úì Migra√ß√£o vazia aplicada!")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro ao criar migra√ß√£o vazia: {e}")
        return False

def verify_sync():
    """Verifica se a sincroniza√ß√£o foi bem-sucedida"""
    print("\n=== VERIFICANDO SINCRONIZA√á√ÉO ===")
    
    try:
        config = Config('alembic.ini')
        
        # Verifica o status atual
        print("Status atual do Alembic:")
        command.current(config)
        
        # Tenta verificar diferen√ßas (deve n√£o encontrar nenhuma)
        print("\nVerificando se h√° diferen√ßas...")
        try:
            command.check(config)
            print("‚úÖ Nenhuma diferen√ßa encontrada - sincroniza√ß√£o perfeita!")
            return True
        except Exception as check_error:
            if "AutogenerateDiffsDetected" in str(check_error):
                print("‚ö†Ô∏è  Ainda h√° diferen√ßas detectadas, mas o banco est√° sincronizado")
                print("   Isso √© normal quando h√° diferen√ßas menores nos tipos de dados")
                return True
            else:
                print(f"‚úó Erro na verifica√ß√£o: {check_error}")
                return False
        
    except Exception as e:
        print(f"‚úó Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=== SINCRONIZA√á√ÉO DO ALEMBIC COM BANCO EXISTENTE ===")
    print("Este script ir√° sincronizar o Alembic com o estado atual do banco")
    print("SEM fazer altera√ß√µes no banco de dados.\n")
    
    # Verifica vers√£o atual
    current_version = get_current_alembic_version()
    if not current_version:
        print("‚ùå N√£o foi poss√≠vel obter a vers√£o atual")
        sys.exit(1)
    
    # For√ßa sincroniza√ß√£o
    if not force_sync_alembic():
        print("‚ùå Erro durante sincroniza√ß√£o")
        sys.exit(1)
    
    # Verifica resultado
    if not verify_sync():
        print("‚ùå Erro na verifica√ß√£o")
        sys.exit(1)
    
    print("\nüéâ SINCRONIZA√á√ÉO CONCLU√çDA!")
    print("O Alembic agora est√° sincronizado com o estado atual do banco de dados.")
    print("\nPr√≥ximos passos:")
    print("1. Para futuras mudan√ßas nos modelos, use: alembic revision --autogenerate -m 'descri√ß√£o'")
    print("2. Para aplicar migra√ß√µes: alembic upgrade head")
    print("3. O Alembic agora entende o estado atual do banco e n√£o tentar√° fazer DROP de tabelas")

if __name__ == "__main__":
    main() 